@page "/grupos"
@inject IHttpClientFactory HttpClientFactory

<MudContainer MaxWidth="MaxWidth.False" Class="pt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Grupos do Tenant</MudText>

    <DataGridCustom TItem="TenantGroupResponse"
                    Response="@response"
                    IsLoading="@isLoading"
                    LoadDataAsync="LoadGrupoTenantDataAsync"
                    EmptyMessage="Nenhum Grupo Encontrador">

        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Nome</MudTh>
            <MudTh>Descrição</MudTh>
            <MudTh>Data de Criação</MudTh>
        </HeaderContent>

        <RowTemplate Context="item">
            <MudTd DataLabel="ID">
                <MudText Typo="Typo.caption" Style="font-family: monospace;">
                    @item.Id
                </MudText>
            </MudTd>
            <MudTd>@item.DisplayName</MudTd>
            <MudTd>@item.Description</MudTd>
            <MudTd>@item.CreatedDateTime.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
        </RowTemplate>
    </DataGridCustom>
</MudContainer>
@code {
    bool isLoading = true;

    private int selectedPageSize = 10;
    private int selectedPageNumber = 1;

    private PaginatedResponse<TenantGroupResponse> response;


    public async Task<PaginatedResponse<TenantGroupResponse>> LoadGrupoTenantDataAsync(int pageNumber, int pageSize)
    {
        var client = HttpClientFactory.CreateClient("ServerApi");

        // users = await http.GetFromJsonAsync<object>("/api/tenant/users");
        // me = await http.GetFromJsonAsync<object>("/api/me");
        //signins = await http.GetFromJsonAsync<object>("/api/tenant/signins");

        return await client.GetFromJsonAsync<PaginatedResponse<TenantGroupResponse>>("api/tenant/groups".SetQueryParams(new PaginatedRequest
        {
            PageNumber = pageNumber,
            PageSize = pageSize
        }));

    }

}
