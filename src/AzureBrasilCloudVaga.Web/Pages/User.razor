@page "/"
@inject IHttpClientFactory HttpClientFactory


@*TODO: Poderia adicionar policy e roles, se necessário*@
<AuthorizeViewCustom>
    <MudContainer MaxWidth="MaxWidth.False" Class="pt-4">
        <MudText Typo="Typo.h4" Class="mb-4">Usuarios</MudText>

        <DataGridCustom TItem="UserResponse"
                        Response="@response"
                        LoadDataAsync="LoadUsersAsync"
                        EmptyMessage="Nenhum usuario encontrado">

            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Nome</MudTh>
                <MudTh>Nome Principal</MudTh>
                <MudTh>Data de Criação</MudTh>
            </HeaderContent>

            <RowTemplate Context="item">
                <MudTd DataLabel="ID">
                    <MudText Typo="Typo.caption" Style="font-family: monospace;">
                        @item.Id
                    </MudText>
                </MudTd>
                <MudTd>@item.DisplayName</MudTd>
                <MudTd>@item.PrincipalName</MudTd>
                <MudTd>@item.CreatedDateTime.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
            </RowTemplate>
        </DataGridCustom>
    </MudContainer>
</AuthorizeViewCustom>


@code {

    private PaginatedResponse<UserResponse> response;

    public async Task<PaginatedResponse<UserResponse>> LoadUsersAsync(int pageNumber, int pageSize)
    {
        var client = HttpClientFactory.CreateClient("ServerApi");

        return await client.GetOrFailAsync<PaginatedResponse<UserResponse>>("api/tenant/users".SetQueryParams(new PaginatedRequest
        {
            PageNumber = pageNumber,
            PageSize = pageSize
        }));

    }

}